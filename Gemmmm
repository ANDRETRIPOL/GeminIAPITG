<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gemini AI Assistant</title>
    <style>
        body {
            width: 100%;
            height: 100vh;
            margin: 0;
            padding: 10px;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: #fcfcfc;
            display: flex;
            flex-direction: column; /* Убедимся, что элементы располагаются вертикально */
        }
        #chatContainer {
            flex-grow: 1; /* Делаем контейнер чат-бокса гибким */
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        #chatbox {
            flex-grow: 1;
            overflow-y: auto;
            padding: 10px;
            font-size: 14px;
        }
        .message {
            max-width: 70%;
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 18px;
            line-height: 1.4;
        }
        .user-message {
            align-self: flex-end;
            background-color: #007aff;
            color: white;
            margin-left: auto;
        }
        .ai-message {
            align-self: flex-start;
            background-color: #e5e5ea;
            color: black;
        }
        #inputContainer {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 10px 0;
            position: relative;
        }
        #inputDot {
            width: 15px;
            height: 15px;
            background-color: #000;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55);
            position: absolute;
            animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.2); opacity: 0.7; }
            100% { transform: scale(1); opacity: 1; }
        }
        #inputWrapper {
            display: flex;
            align-items: center;
            width: 80%;
            max-width: 250px;
            background-color: white;
            border-radius: 20px;
            overflow: hidden;
            opacity: 1; /* Убедимся, что ввод виден */
            transition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55);
        }
        #userInput {
            flex-grow: 1;
            padding: 8px 10px;
            border: none;
            font-size: 14px;
            background-color: transparent;
            outline: none;
        }
        #sendButton {
            background-color: transparent;
            border: none;
            padding: 8px 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        #sendButton svg {
            width: 18px;
            height: 18px;
            fill: none;
            stroke: #000;
            stroke-width: 2;
            stroke-linecap: round;
            stroke-linejoin: round;
        }
        #requestLimit {
            text-align: center;
            padding: 5px 0;
            font-size: 12px;
            color: #8e8e93;
        }
    </style>
</head>
<body>
    <div id="chatContainer">
        <div id="chatbox"></div>
        <div id="inputContainer">
            <div id="inputDot"></div>
            <div id="inputWrapper">
                <input type="text" id="userInput" placeholder="Type your message...">
                <button id="sendButton">
                    <svg viewBox="0 0 24 24">
                        <path d="M12 19V5M5 12l7-7 7 7"/>
                    </svg>
                </button>
            </div>
        </div>
        <div id="requestLimit">Requests left: <span id="requestCount">20</span></div>
    </div>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script>
        const API_KEY = 'AIzaSyAptJ6VXqCvXL0GqJJJ3FLQ8KoannOZSiE'; // Оставляем API для Gemini
        const API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';
        const MAX_REQUESTS_PER_HOUR = 20;

        let requestsCount = 0;
        let lastResetTime = Date.now();

        // Инициализация Telegram Web App
        const tg = window.Telegram.WebApp;
        tg.ready(); // Подготовка Telegram Web App

        document.getElementById('sendButton').addEventListener('click', sendMessage);
        document.getElementById('userInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        function updateRequestCount() {
            document.getElementById('requestCount').textContent = MAX_REQUESTS_PER_HOUR - requestsCount;
        }

        function resetRequestCount() {
            const now = Date.now();
            if (now - lastResetTime >= 3600000) { // 1 hour in milliseconds
                requestsCount = 0;
                lastResetTime = now;
                updateRequestCount();
            }
        }

        function sendMessage() {
            resetRequestCount();
            if (requestsCount >= MAX_REQUESTS_PER_HOUR) {
                appendMessage('System: You have reached the maximum number of requests per hour. Please try again later.', 'system');
                return;
            }

            const userInput = document.getElementById('userInput');
            const message = userInput.value.trim();
            if (message) {
                appendMessage(message, 'user-message');
                userInput.value = '';

                animateSendButton();
                fetchGeminiResponse(message); // Запрос к API
                requestsCount++;
                updateRequestCount();
            }
        }

        function appendMessage(message, className) {
            const chatbox = document.getElementById('chatbox');
            const messageElement = document.createElement('div');
            messageElement.textContent = message;
            messageElement.classList.add('message', className);
            chatbox.appendChild(messageElement);
            chatbox.scrollTop = chatbox.scrollHeight;
        }

        function animateSendButton() {
            const sendButton = document.getElementById('sendButton');
            sendButton.classList.add('clicked');
            setTimeout(() => {
                sendButton.classList.remove('clicked');
            }, 500);
        }

        async function fetchGeminiResponse(message) {
            try {
                const response = await fetch(`${API_URL}?key=${API_KEY}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        contents: [{
                            parts: [{
                                text: message
                            }]
                        }]
                    })
                });

                const data = await response.json();
                if (data.candidates && data.candidates[0] && data.candidates[0].content) {
                    let aiResponse = data.candidates[0].content.parts[0].text;
                    aiResponse = aiResponse.replace(/\*/g, '').replace(/Gemini:/g, '');
                    typeMessage(aiResponse, 'ai-message');
                } else {
                    appendMessage('Извините, я не смог сгенерировать ответ.', 'ai-message');
                }
            } catch (error) {
                appendMessage('Произошла ошибка при получении ответа. Пожалуйста, попробуйте позже.', 'system');
                console.error('Error:', error);
            }
        }

        function typeMessage(message, className) {
            const chatbox = document.getElementById('chatbox');
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', className);
            chatbox.appendChild(messageElement);

            let i = 0;
            const interval = setInterval(() => {
                if (i < message.length) {
                    messageElement.textContent += message[i];
                    i++;
                    chatbox.scrollTop = chatbox.scrollHeight;
                } else {
                    clearInterval(interval);
                }
            }, 30); // Скорость набора: 30 мс на символ
        }

        // Инициализация счетчика запросов
        chrome.storage.local.get(['requestsCount', 'lastResetTime'], function(result) {
            requestsCount = result.requestsCount || 0;
            lastResetTime = result.lastResetTime || Date.now();
            updateRequestCount();
        });

        // Сохранение счетчика запросов при закрытии
        window.addEventListener('unload', function() {
            chrome.storage.local.set({ requestsCount: requestsCount, lastResetTime: lastResetTime });
        });
    </script>
</body>
</html>
